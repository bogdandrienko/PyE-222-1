Бизнес-боль:
* Люди подают свои резюме (на вакансию)
- скидывают на почту, в свободном формате(нет структуры) резюме
- иногда теряются
- к профилю должен быть прикреплён "оценочный лист"
- нужна электронная база с быстрым поиском, фильтрацией, подбор по категориям
- нужна быстрая ссылка для регистрации и прохождения мини-теста
- нужно оцифровать текущую базу клиентов(из excel-файла)
- ...

Стек технологий:
- Python(django - наш курс/flask - самый лёгкий/fastapi - самый быстрый/sanic - неполноценный)
- html, css, js

Как получить проект:
- Работать в IT компании, придёт начальник и даст задачи
- Быть знакомым, быть аккредитованым

План и тех.задание(Декомпозиция - разделение крупной задачи на мелкие):
- Какие данные нужны от человека - (фио, иин, дата рождения, место, образование, активно, пол, ...)
- html form | class User
- Home, About, Price, Register...

HomePage:
url: '/'
controller(def): render
model(database): -

BlankPage:
url: '/blank'
controller(def): (form)POST: {"name": ..., "experience"...}
model(database): objects.create(name=name)


Преимущества DRF:
1) Удобная панель управления(можно делать Post/Put/Delete прям из неё. 
Нормальный формат просмотра структур данных.)
2) Более быстрая сериализация и валидации.
3) Более стандартный REST - подходит для разработки.


Trello/Jira:
- разложили задачи, выбрали ответственных


Github/Gitlab:
- создать репозиторий
- настроить участникам ssh-ключи
- настроить linter(flake8) / статический анализатор(mypy)

Ответственность и задачи:
senior - максимально поверхностно(без деталей)
middle - более углубленно, иногда можно разбить на подзадачи(для упрощения)
junior - нужно помочь разбить задачу на более мелкие
intern - нужно помочь разбить задачу на более мелкие

###################################################
Register Page
- Какие данные нужны от человека - (фио, иин, дата рождения, место, образование, активно, пол, ...)
- html form | class User

1) MVT(fullstack)
2) clear DRF(backend)
3) React(frontend/fullstack)

* 
* +Как создать django-проект
* +Как вернуть html-страницу
* +Как использовать на странице свой css / js?
* +Как дизайн выбрать?
* +Как сверстать html-страницу.
* +Как передать данные от html до backend
* +Как получить данные от html
* +Как связать базу данных с Django(+Sqlite / PostgreSQL)
ORM: быстрее разработка, легче, универсальнее(один ORM на все базы данных)
* +Как создать запись в базе данных
* +Как реализовать оповещение в случае успеха/не успеха
* 

- Посмотрели статьи
- Сами погуглили
- Спросили у Chat-Gpt
- Почитать книги

- ВСЕ SQL методы(Insert, Select, Update, Delete,)
- ВСЕ ORM методы(CRUD)
DRF:

# todo DJANGO: ORM + DRF









